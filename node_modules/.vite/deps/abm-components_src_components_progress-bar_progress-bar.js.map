{
  "version": 3,
  "sources": ["../../abm-components/src/components/progress-bar/progress-bar-style.js", "../../abm-components/src/components/progress-bar/progress-bar.js"],
  "sourcesContent": ["import { css } from 'lit';\n\nexport const styles = css`\n  .contenedor-padre {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100vh;\n    background-color: transparent;\n    padding: 20px; /* Espaciado alrededor para dispositivos móviles */\n    box-sizing: border-box; /* Incluye el padding en el ancho y alto total */\n  }\n\n  .barra-progreso {\n    width: 100%; /* Usar el 100% del ancho del contenedor */\n    max-width: 600px; /* Máximo ancho para pantallas grandes */\n    height: 20px; /* Altura de la barra de progreso */\n    border-radius: 10px; /* Esquinas redondeadas */\n    background-color: #e0e0e0; /* Color de fondo de la barra */\n    position: relative; /* Asegura que el contenido interno se posicione correctamente */\n    overflow: hidden; /* Esconde el contenido que sobresalga */\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3); /* Sombra para dar un efecto elevado */\n  }\n\n  .barra-relleno {\n    height: 100%; /* Llenar la altura completa de la barra */\n    background-color: blue; /* Color de la barra de progreso */\n    transition: width 0.3s ease; /* Transición suave al cambiar el ancho */\n  }\n\n  .parrafo-barra-progreso { \n    color: white; \n    position: absolute; /* Para posicionar el texto dentro de la barra */\n    left: 50%; /* Centrar horizontalmente */\n    top: 50%; /* Centrar verticalmente */\n    transform: translate(-50%, -50%); /* Alineación perfecta */\n    margin: 0; /* Eliminar márgenes predeterminados */\n    font-weight: bold; /* Texto en negrita para mayor visibilidad */\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);\n  }\n`;\n", "import { LitElement, html, css } from 'lit';\nimport { styles } from './progress-bar-style';\n\nclass ProgressBar extends LitElement {\n  static styles = [styles];\n\n  static get properties() {\n    return {\n      progressBar: { type: Number },\n      StartLoading: { type: Boolean },\n      timeChange: {type: Number}\n    };\n  }\n\n  constructor() {\n    super();\n    this.progressBar = 10;\n    this.timeChange = 200;\n    this.StartLoading = false;\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('StartLoading') && this.StartLoading) {\n      this._Progress();\n    }\n  }\n\n  _Progress() {\n    const intervalId = setInterval(() => {\n      this.progressBar += 10;\n\n      // Al llegar al 100% se detiene\n      if (this.progressBar >= 100) {\n        clearInterval(intervalId);\n      }\n    }, this.timeChange);\n  }\n\n  render() {\n    return html`\n      <div class='contenedor-padre'>\n        <div class='barra-progreso'>\n          <div class='barra-relleno' style=\"width: ${this.progressBar}%\"></div>\n          <p class='parrafo-barra-progreso'>Cargando ...</p>\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('progress-bar', ProgressBar);\n"],
  "mappings": ";;;;;;;;;AAEO,IAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCtB,IAAM,cAAN,cAA0B,WAAW;AAAA,EAGnC,WAAW,aAAa;AACtB,WAAO;AAAA,MACL,aAAa,EAAE,MAAM,OAAO;AAAA,MAC5B,cAAc,EAAE,MAAM,QAAQ;AAAA,MAC9B,YAAY,EAAC,MAAM,OAAM;AAAA,IAC3B;AAAA,EACF;AAAA,EAEA,cAAc;AACZ,UAAM;AACN,SAAK,cAAc;AACnB,SAAK,aAAa;AAClB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,QAAQ,mBAAmB;AACzB,QAAI,kBAAkB,IAAI,cAAc,KAAK,KAAK,cAAc;AAC9D,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAAA,EAEA,YAAY;AACV,UAAM,aAAa,YAAY,MAAM;AACnC,WAAK,eAAe;AAGpB,UAAI,KAAK,eAAe,KAAK;AAC3B,sBAAc,UAAU;AAAA,MAC1B;AAAA,IACF,GAAG,KAAK,UAAU;AAAA,EACpB;AAAA,EAEA,SAAS;AACP,WAAO;AAAA;AAAA;AAAA,qDAG0C,KAAK,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAKnE;AACF;AA5CE,cADI,aACG,UAAS,CAAC,MAAM;AA8CzB,eAAe,OAAO,gBAAgB,WAAW;",
  "names": []
}
